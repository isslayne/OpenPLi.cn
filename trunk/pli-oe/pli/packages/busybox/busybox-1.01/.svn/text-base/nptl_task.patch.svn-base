diff -Naur busybox-1.00/libbb/procps.c busybox-1.00-patched/libbb/procps.c
--- busybox-1.00/libbb/procps.c	2004-08-27 00:18:58.000000000 +0200
+++ busybox-1.00-patched/libbb/procps.c	2005-02-05 20:19:11.000000000 +0100
@@ -22,7 +22,7 @@
 #endif
 	)
 {
-	static DIR *dir;
+	static DIR *dir, *taskdir;
 	struct dirent *entry;
 	static procps_status_t ret_status;
 	char *name;
@@ -32,6 +32,7 @@
 	FILE *fp;
 	procps_status_t curstatus;
 	int pid;
+	static int parentpid;
 	long tasknice;
 	struct stat sb;
 
@@ -40,111 +41,150 @@
 		if(!dir)
 			bb_error_msg_and_die("Can't open /proc");
 	}
-	for(;;) {
-		if((entry = readdir(dir)) == NULL) {
-			closedir(dir);
-			dir = 0;
-			return 0;
-		}
-		name = entry->d_name;
-		if (!(*name >= '0' && *name <= '9'))
-			continue;
 
-		memset(&curstatus, 0, sizeof(procps_status_t));
-		pid = atoi(name);
-		curstatus.pid = pid;
+	if (taskdir) {
+		for(;;) {
+			if((entry = readdir(taskdir)) == NULL) {
+				closedir(taskdir);
+				taskdir = 0;
+				break;
+			}
+			name = entry->d_name;
+			if (!(*name >= '0' && *name <= '9'))
+				continue;
 
-		sprintf(status, "/proc/%d", pid);
-		if(stat(status, &sb))
-			continue;
-		my_getpwuid(curstatus.user, sb.st_uid, sizeof(curstatus.user));
+			memset(&curstatus, 0, sizeof(procps_status_t));
+			pid = atoi(name);
+			curstatus.pid = pid;
 
-		sprintf(status, "/proc/%d/stat", pid);
-		if((fp = fopen(status, "r")) == NULL)
-			continue;
-#ifdef CONFIG_SELINUX
-		if(use_selinux)
-		{
-			if(fstat_secure(fileno(fp), &sb, sid))
+			sprintf(status, "/proc/%d/task/%d", parentpid, pid);
+			if(stat(status, &sb))
 				continue;
-		}
-		else
+			my_getpwuid(curstatus.user, sb.st_uid, sizeof(curstatus.user));
+
+			sprintf(status, "/proc/%d/task/%d/stat", parentpid, pid);
+			if((fp = fopen(status, "r")) == NULL)
+				continue;
+#ifdef CONFIG_SELINUX
+			if(use_selinux)
+			{
+				if(fstat_secure(fileno(fp), &sb, sid))
+					continue;
+			}
+			else
 #endif
-		name = fgets(buf, sizeof(buf), fp);
-		fclose(fp);
-		if(name == NULL)
-			continue;
-		name = strrchr(buf, ')'); /* split into "PID (cmd" and "<rest>" */
-		if(name == 0 || name[1] != ' ')
-			continue;
-		*name = 0;
-		sscanf(buf, "%*s (%15c", curstatus.short_cmd);
-		n = sscanf(name+2,
-		"%c %d "
-		"%*s %*s %*s %*s "     /* pgrp, session, tty, tpgid */
-		"%*s %*s %*s %*s %*s " /* flags, min_flt, cmin_flt, maj_flt, cmaj_flt */
+			name = fgets(buf, sizeof(buf), fp);
+			fclose(fp);
+			if(name == NULL)
+				continue;
+			name = strrchr(buf, ')'); /* split into "PID (cmd" and "<rest>" */
+			if(name == 0 || name[1] != ' ')
+				continue;
+			*name = 0;
+			sscanf(buf, "%*s (%15c", curstatus.short_cmd);
+			n = sscanf(name+2,
+			"%c %d "
+			"%*s %*s %*s %*s "     /* pgrp, session, tty, tpgid */
+			"%*s %*s %*s %*s %*s " /* flags, min_flt, cmin_flt, maj_flt, cmaj_flt */
 #ifdef FEATURE_CPU_USAGE_PERCENTAGE
-		"%lu %lu "
+			"%lu %lu "
 #else
-		"%*s %*s "
+			"%*s %*s "
 #endif
-		"%*s %*s %*s "         /* cutime, cstime, priority */
-		"%ld "
-		"%*s %*s %*s "         /* timeout, it_real_value, start_time */
-		"%*s "                 /* vsize */
-		"%ld",
-		curstatus.state, &curstatus.ppid,
+			"%*s %*s %*s "         /* cutime, cstime, priority */
+			"%ld "
+			"%*s %*s %*s "         /* timeout, it_real_value, start_time */
+			"%*s "                 /* vsize */
+			"%ld",
+			curstatus.state, &curstatus.ppid,
 #ifdef FEATURE_CPU_USAGE_PERCENTAGE
-		&curstatus.utime, &curstatus.stime,
+			&curstatus.utime, &curstatus.stime,
 #endif
-		&tasknice,
-		&curstatus.rss);
+			&tasknice,
+			&curstatus.rss);
+			if ( pid != parentpid )
+				curstatus.ppid = parentpid;
 #ifdef FEATURE_CPU_USAGE_PERCENTAGE
-		if(n != 6)
+			if(n != 6)
 #else
-		if(n != 4)
+			if(n != 4)
 #endif
-			continue;
+				continue;
 
-		if (curstatus.rss == 0 && curstatus.state[0] != 'Z')
-			curstatus.state[1] = 'W';
-		else
-			curstatus.state[1] = ' ';
-		if (tasknice < 0)
-			curstatus.state[2] = '<';
-		else if (tasknice > 0)
-			curstatus.state[2] = 'N';
-		else
-			curstatus.state[2] = ' ';
+			if (curstatus.rss == 0 && curstatus.state[0] != 'Z')
+				curstatus.state[1] = 'W';
+			else
+				curstatus.state[1] = ' ';
+			if (tasknice < 0)
+				curstatus.state[2] = '<';
+			else if (tasknice > 0)
+				curstatus.state[2] = 'N';
+			else
+				curstatus.state[2] = ' ';
 
 #ifdef PAGE_SHIFT
-		curstatus.rss <<= (PAGE_SHIFT - 10);     /* 2**10 = 1kb */
+			curstatus.rss <<= (PAGE_SHIFT - 10);     /* 2**10 = 1kb */
 #else
-		curstatus.rss *= (getpagesize() >> 10);     /* 2**10 = 1kb */
+			curstatus.rss *= (getpagesize() >> 10);     /* 2**10 = 1kb */
 #endif
 
-		if(save_user_arg0) {
-			sprintf(status, "/proc/%d/cmdline", pid);
-			if((fp = fopen(status, "r")) == NULL)
-				continue;
-			if((n=fread(buf, 1, sizeof(buf)-1, fp)) > 0) {
-				if(buf[n-1]=='\n')
-					buf[--n] = 0;
-				name = buf;
-				while(n) {
-					if(((unsigned char)*name) < ' ')
-						*name = ' ';
-					name++;
-					n--;
+			if(save_user_arg0) {
+				sprintf(status, "/proc/%d/task/%d/cmdline", parentpid, pid);
+				if((fp = fopen(status, "r")) == NULL)
+					continue;
+				if((n=fread(buf, 1, sizeof(buf)-1, fp)) > 0) {
+					if(buf[n-1]=='\n')
+						buf[--n] = 0;
+					name = buf;
+					while(n) {
+						if(((unsigned char)*name) < ' ')
+							*name = ' ';
+						name++;
+						n--;
+					}
+					*name = 0;
+					if(buf[0])
+						curstatus.cmd = strdup(buf);
+					/* if NULL it work true also */
 				}
-				*name = 0;
-				if(buf[0])
-					curstatus.cmd = strdup(buf);
-				/* if NULL it work true also */
+				fclose(fp);
 			}
-			fclose(fp);
+			return memcpy(&ret_status, &curstatus, sizeof(procps_status_t));
+		}
+	}
+
+	for(;;) {
+		if((entry = readdir(dir)) == NULL) {
+			closedir(dir);
+			dir = 0;
+			return 0;
+		}
+		name = entry->d_name;
+		if (!(*name >= '0' && *name <= '9'))
+			continue;
+
+		memset(&curstatus, 0, sizeof(procps_status_t));
+		pid = atoi(name);
+		curstatus.pid = pid;
+
+		sprintf(status, "/proc/%d", pid);
+		if(stat(status, &sb))
+			continue;
+		my_getpwuid(curstatus.user, sb.st_uid, sizeof(curstatus.user));
+
+		if (!taskdir) {
+			sprintf(status, "/proc/%d/task", pid);
+			taskdir = opendir(status);
+			if(!taskdir)
+					// ignore processes without taskdir
+				continue;
+			parentpid = pid;
+			return procps_scan(save_user_arg0
+#ifdef CONFIG_SELINUX
+						,use_selinux, sid
+#endif
+				);
 		}
-		return memcpy(&ret_status, &curstatus, sizeof(procps_status_t));
 	}
 }
 
